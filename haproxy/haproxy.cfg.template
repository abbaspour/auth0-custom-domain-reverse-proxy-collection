global
    log /dev/log local0
    log /dev/log local1 debug
    #chroot /var/lib/haproxy
    #stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    #stats timeout 30s
    #user haproxy
    #group haproxy
    daemon

    # Default ciphers to use on SSL-enabled listening sockets.
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets


defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

listen stats
    bind *:8081
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth amin:${HAPROXY_ADMIN_PASS}
    stats realm Haproxy\ Statistics
    stats admin if LOCALHOST

# HTTP frontend - redirect to HTTPS
frontend http-in
    bind *:8080
    mode http
    option httplog
    
    # Redirect all HTTP traffic to HTTPS
    http-request redirect scheme https code 301 if !{ ssl_fc }
    
    # Define hosts
    acl host_domain hdr(host) -i ${DOMAIN_NAME}
    
    # Use the domain backend
    use_backend auth0_backend if host_domain

# HTTPS frontend
frontend https-in
    #bind *:8443 ssl crt /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain-privkey.pem
    bind *:8443 ssl crt ./fullchain-privkey.pem
    mode http
    option httplog

    # Define hosts
    acl host_domain hdr(host) -i ${DOMAIN_NAME}
    
    # Use the domain backend
    use_backend auth0_backend if host_domain

resolvers cfdns
  nameserver ns1 1.1.1.1:53
  nameserver ns2 1.0.0.1:53

# Backend for Auth0
backend auth0_backend
    mode http
    option httpchk
    option forwardfor
    
    # Add the cname-api-key header
    http-request set-header cname-api-key ${CNAME_API_KEY}
    
    # Set the Host header to the Auth0 edge location
    http-request set-header Host ${AUTH0_EDGE_LOCATION}
    
    # Timeout settings
    timeout connect 5s
    timeout server 50s
    
    # Retry settings
    option redispatch
    retries 3
    
    # Health check settings
    http-check send meth GET uri /test
    http-check expect status 200

    # Enable SSL for the backend with additional options
    # sni str(${AUTH0_EDGE_LOCATION})
    server auth0 ${AUTH0_EDGE_LOCATION}:443 ssl verify none check inter 5s rise 2 fall 3 ciphers ECDHE+AESGCM:!ECDSA
